var gdjs;(function(n){const r=new n.Logger("Multiplayer"),F=window.performance&&typeof window.performance.now=="function"?window.performance.now.bind(window.performance):Date.now,k=async({relativeUrl:D,method:J,body:N,dev:j})=>{const P=n.playerAuthentication.getUserId(),U=n.playerAuthentication.getUserToken();if(!P||!U)throw r.warn("Cannot fetch as a player if the player is not connected."),new Error("Cannot fetch as a player if the player is not connected.");const I=j?"https://api-dev.gdevelop.io":"https://api.gdevelop.io",O=new URL(`${I}${D}`);O.searchParams.set("playerId",P);const T=O.toString(),m={"Content-Type":"application/json",Authorization:`player-game-token ${U}`},b=await fetch(T,{method:J,headers:m,body:N});if(!b.ok)throw new Error(`Error while fetching as a player: ${b.status} ${b.statusText}`);const h=await b.text();if(h!=="OK")try{return JSON.parse(h)}catch(q){throw new Error(`Error while parsing the response: ${q}`)}};let Me;(function(t){t.disableMultiplayerForTesting=!1,t._isReadyToSendOrReceiveGameUpdateMessages=!1;let N=null,j=!1,P=!1,U=!1;t._isLobbyGameRunning=!1;let O=!1,T=!1,m=null,b=null,h=null,q=!1,y=null,B=null,Z=!1,Y=null,f=null,R=!1,Q=null,H=null,l=null,ee=null,x=null;const Ce=1e4,ie=3e4;let te=ie;const ve=1e3,Le=1e4,Ee=1e3,Pe=1e4;let V=null;const Te=12e3;t.DEFAULT_OBJECT_MAX_SYNC_RATE=30,t._objectMaxSyncRate=t.DEFAULT_OBJECT_MAX_SYNC_RATE;let w=!1;t.playerNumber=null,t.hostPeerId=null,n.registerRuntimeScenePreEventsCallback(e=>{w=e.getGame().isUsingGDevelopDevelopmentEnvironment(),!t.disableMultiplayerForTesting&&(n.multiplayerMessageManager.handleHeartbeatsToSend(),n.multiplayerMessageManager.handleJustDisconnectedPeers(e),n.multiplayerMessageManager.handleChangeInstanceOwnerMessagesReceived(e),n.multiplayerMessageManager.handleUpdateInstanceMessagesReceived(e),n.multiplayerMessageManager.handleCustomMessagesReceived(),n.multiplayerMessageManager.handleAcknowledgeMessagesReceived(),n.multiplayerMessageManager.resendClearOrCancelAcknowledgedMessages(e),n.multiplayerMessageManager.handleChangeVariableOwnerMessagesReceived(e),t._isLobbyGameRunning&&n.multiplayerMessageManager.handleSavedUpdateMessages(e),n.multiplayerMessageManager.handleUpdateGameMessagesReceived(e),n.multiplayerMessageManager.handleUpdateSceneMessagesReceived(e))}),n.registerRuntimeScenePostEventsCallback(e=>{t.disableMultiplayerForTesting||(ke(e),Ne(e),n.multiplayerMessageManager.handleHeartbeatsReceived(),n.multiplayerMessageManager.handleEndGameMessagesReceived(),n.multiplayerMessageManager.handleResumeGameMessagesReceived(e),n.multiplayerMessageManager.handleDestroyInstanceMessagesReceived(e),n.multiplayerVariablesManager.handleChangeVariableOwnerMessagesToSend(),n.multiplayerMessageManager.handleUpdateGameMessagesToSend(e),n.multiplayerMessageManager.handleUpdateSceneMessagesToSend(e))}),n.registerRuntimeScenePostEventsCallback(()=>{t.disableMultiplayerForTesting||(U=!1,O=!1,T=!1)});const Re=({runtimeGame:e,gameId:o})=>{const s="https://gd.games",i=new URL(`${s}/games/${o}/lobbies${b?`/${b}`:""}`);i.searchParams.set("gameVersion",e.getGameData().properties.version),e.getAdditionalOptions().nativeMobileApp&&i.searchParams.set("nativeMobileApp","true"),i.searchParams.set("isPreview",e.isPreview()?"true":"false"),w&&i.searchParams.set("dev","true"),h&&i.searchParams.set("connectionId",h),t.playerNumber&&i.searchParams.set("positionInLobby",t.playerNumber.toString());const g=n.playerAuthentication.getUserId();g&&i.searchParams.set("playerId",g);const d=n.playerAuthentication.getUserToken();d&&i.searchParams.set("playerToken",d);const a=e.getPlatformInfo();return i.searchParams.set("scm",a.supportedCompressionMethods.join(",")),i.searchParams.set("multiplayerVersion","2"),i.toString()};t.setObjectsSynchronizationRate=e=>{e<1||e>60?(r.warn(`Invalid rate ${e} for object synchronization. Defaulting to ${t.DEFAULT_OBJECT_MAX_SYNC_RATE}.`),t._objectMaxSyncRate=t.DEFAULT_OBJECT_MAX_SYNC_RATE):t._objectMaxSyncRate=e},t.getObjectsSynchronizationRate=()=>t._objectMaxSyncRate,t.hasLobbyGameJustStarted=()=>U,t.isLobbyGameRunning=()=>t._isLobbyGameRunning,t.isReadyToSendOrReceiveGameUpdateMessages=()=>t._isReadyToSendOrReceiveGameUpdateMessages,t.hasLobbyGameJustEnded=()=>O,t.getPlayersInLobbyCount=()=>n.multiplayerMessageManager.getNumberOfConnectedPlayers(),t.isPlayerConnected=e=>n.multiplayerMessageManager.isPlayerConnected(e),t.getCurrentPlayerNumber=()=>t.playerNumber||0,t.isCurrentPlayerHost=()=>!!t.hostPeerId&&t.hostPeerId===n.multiplayerPeerJsHelper.getCurrentId(),t.isMigratingHost=()=>!!Z,t.endLobbyWhenHostLeaves=e=>{q=e},t.shouldEndLobbyWhenHostLeaves=()=>q,t.getPlayerUsername=e=>n.multiplayerMessageManager.getPlayerUsername(e),t.getCurrentPlayerUsername=()=>{const e=t.getCurrentPlayerNumber();return t.getPlayerUsername(e)};const ke=e=>{const o=n.multiplayerMessageManager.getLatestPlayerWhoJustLeft();if(o){const s=t.getPlayerUsername(o);n.multiplayerComponents.displayPlayerLeftNotification(e,s),n.multiplayerMessageManager.removePlayerWhoJustLeft(),t.isCurrentPlayerHost()&&t.isReadyToSendOrReceiveGameUpdateMessages()&&S()}},Ne=e=>{const o=n.multiplayerMessageManager.getLatestPlayerWhoJustJoined();if(o){const s=t.getPlayerUsername(o);n.multiplayerComponents.displayPlayerJoinedNotification(e,s),t.isCurrentPlayerHost()&&t.isReadyToSendOrReceiveGameUpdateMessages()&&S()}n.multiplayerMessageManager.removePlayerWhoJustJoined()},de=(e,o,s=0)=>{const g=`${w?"https://api-dev.gdevelop.io":"https://api.gdevelop.io"}/game/public-game/${o}`;return fetch(g,{method:"HEAD"}).then(d=>d.status!==200?(r.warn(`Error while fetching the game: ${d.status} ${d.statusText}`),d.status===404||s>2?!1:de(e,o,s+1)):!0,d=>(r.error("Error while fetching game:",d),!1))},re=function(e,o){if(h){r.info("Already connected to a lobby.");return}l&&(r.warn("Already connected to a lobby. Closing the previous one."),l.close(),h=null,t.playerNumber=null,t.hostPeerId=null,b=null,l=null);const s=n.projectData.properties.projectUuid,i=n.playerAuthentication.getUserId(),g=n.playerAuthentication.getUserToken();if(!s){r.error("Cannot open lobbies if the project has no ID.");return}if(!i||!g){r.warn("Cannot open lobbies if the player is not connected.");return}const d=w?"wss://api-ws-dev.gdevelop.io/play":"wss://api-ws.gdevelop.io/play",a=new URL(d);a.searchParams.set("gameId",s),a.searchParams.set("lobbyId",o),a.searchParams.set("playerId",i),a.searchParams.set("connectionType","lobby"),a.searchParams.set("playerGameToken",g),l=new WebSocket(a.toString()),l.onopen=()=>{if(r.info("Connected to the lobby."),ee=setInterval(()=>{l&&l.send(JSON.stringify({action:"heartbeat",connectionType:"lobby"}))},Ce),l){l.send(JSON.stringify({action:"getConnectionId"}));const c=e.getGame().getPlatformInfo();l.send(JSON.stringify({action:"sessionInformation",connectionType:"lobby",isCordova:c.isCordova,devicePlatform:c.devicePlatform,navigatorPlatform:c.navigatorPlatform,hasTouch:c.hasTouch,supportedCompressionMethods:c.supportedCompressionMethods}))}},l.onmessage=c=>{if(c.data){const p=JSON.parse(c.data);switch(p.type){case"connectionId":{const u=p.data,C=u.connectionId,W=u.positionInLobby,$=u.validIceServers||[],Ie=u.brokerServerConfig;if(!C||!W){r.error("No connectionId or position received"),n.multiplayerComponents.displayErrorNotification(e),l&&l.close();return}_e({runtimeScene:e,connectionId:C,positionInLobby:W,lobbyId:o,playerId:i,playerToken:g,validIceServers:$,brokerServerConfig:Ie});break}case"lobbyUpdated":{const C=p.data.positionInLobby;Je({runtimeScene:e,positionInLobby:C});break}case"gameCountdownStarted":{const C=p.data.compressionMethod||"none";Ue({runtimeScene:e,compressionMethod:C});break}case"gameStarted":{te=p.data.heartbeatInterval||ie,Oe({runtimeScene:e});break}case"peerId":{const u=p.data;if(!u){r.error("No message received");return}const C=u.peerId,W=u.compressionMethod;if(!C||!W){r.error("Malformed message received");return}const $={times:2,delayInMs:500};try{n.evtTools.network.retryIfFailed($,async()=>{Ge({peerId:C,compressionMethod:W})})}catch{r.error(`Handling peerId message from websocket failed (after {${$.times}} times with a delay of ${$.delayInMs}ms). Not trying anymore.`)}break}}}},l.onclose=()=>{if(t._isLobbyGameRunning||r.info("Disconnected from the lobby."),h=null,l=null,ee&&clearInterval(ee),t._isLobbyGameRunning)return;const c=n.multiplayerComponents.getLobbiesIframe(e);!c||!c.contentWindow||c.contentWindow.postMessage({id:"lobbyLeft"},"*")}},ge=e=>{n.multiplayerComponents.displayConnectionErrorNotification(e),K(),f=null,m=null,R&&A(e)},_e=function({runtimeScene:e,connectionId:o,positionInLobby:s,lobbyId:i,playerId:g,playerToken:d,validIceServers:a,brokerServerConfig:c}){if(a.length)for(const u of a)n.multiplayerPeerJsHelper.useCustomICECandidate(u.urls,u.username,u.credential);if(c?n.multiplayerPeerJsHelper.useCustomBrokerServer(c.hostname,c.port,c.path,c.key,c.secure,{onPeerUnavailable:()=>ge(e)}):n.multiplayerPeerJsHelper.useDefaultBrokerServer({onPeerUnavailable:()=>ge(e)}),h=o,t.playerNumber=s,b=i,f==="OPEN_LOBBY_PAGE"){t.openLobbiesWindow(e),A(e);return}else if(f==="JOIN_GAME"){ue();return}else if(f==="START_GAME"){const u={times:2,delayInMs:500};try{n.evtTools.network.retryIfFailed(u,async()=>{fe(),be()})}catch{r.error(`Sending of peerId message from websocket failed (after {${u.times}} times with a delay of ${u.delayInMs}ms). Not trying anymore.`)}return}const p=n.multiplayerComponents.getLobbiesIframe(e);if(!p||!p.contentWindow){r.error("The lobbies iframe is not opened, cannot send the join message.");return}p.contentWindow.postMessage({id:"lobbyJoined",lobbyId:i,playerId:g,playerToken:d,connectionId:h,positionInLobby:s},"https://gd.games")},K=function(){l&&l.close(),h=null,t.playerNumber=null,t.hostPeerId=null,b=null,l=null},Je=function({runtimeScene:e,positionInLobby:o}){t.playerNumber=o;const s=n.multiplayerComponents.getLobbiesIframe(e);!s||!s.contentWindow||s.contentWindow.postMessage({id:"lobbyUpdated",positionInLobby:o},"*")},Ue=function({runtimeScene:e,compressionMethod:o}){n.multiplayerPeerJsHelper.setCompressionMethod(o),t.getCurrentPlayerNumber()===1&&fe();const s=n.multiplayerComponents.getLobbiesIframe(e);if(!s||!s.contentWindow){r.info("The lobbies iframe is not opened, not sending message.");return}s.contentWindow.postMessage({id:"gameCountdownStarted"},"*"),n.multiplayerComponents.hideLobbiesCloseButtonTemporarily(e)},S=async function(){const e=n.projectData.properties.projectUuid;if(!e||!b){r.error("Cannot keep the lobby playing without the game ID or lobby ID.");return}const o=`/play/game/${e}/public-lobby/${b}/action/heartbeat`,s=n.multiplayerMessageManager.getConnectedPlayers();try{await k({relativeUrl:o,method:"POST",body:JSON.stringify({players:s}),dev:w})}catch(i){r.error("Error while sending heartbeat, retrying:",i);try{await k({relativeUrl:o,method:"POST",body:JSON.stringify({players:s}),dev:w})}catch(g){r.error("Error while sending heartbeat a second time. Giving up:",g)}}},Oe=function({runtimeScene:e}){const o=n.multiplayerPeerJsHelper.getAllPeers();if(!t.isCurrentPlayerHost()&&o.length===0){n.multiplayerComponents.displayConnectionErrorNotification(e),K(),t.removeLobbiesContainer(e),ae(e);return}t.isCurrentPlayerHost()&&(x=setInterval(async()=>{await S()},te)),r.info("Lobby game has started."),n.multiplayerMessageManager.handleSavedUpdateMessages(e),R&&A(e),t._isReadyToSendOrReceiveGameUpdateMessages=!0,U=!0,t._isLobbyGameRunning=!0,t.removeLobbiesContainer(e),l&&l.close(),ae(e)};t.handleLobbyGameEnded=function(){r.info("Lobby game has ended."),O=!0,t._isLobbyGameRunning=!1,b=null,t.playerNumber=null,t.hostPeerId=null,t._isReadyToSendOrReceiveGameUpdateMessages=!1,x&&(clearInterval(x),x=null),n.multiplayerPeerJsHelper.disconnectFromAllPeers(),n.multiplayerMessageManager.clearAllMessagesTempData()};const Ge=function({peerId:e,compressionMethod:o}){n.multiplayerPeerJsHelper.setCompressionMethod(o);const s=n.multiplayerPeerJsHelper.getCurrentId();if(!s)throw r.error("No peerId found, the player does not seem connected to the broker server."),new Error("Missing player peerId.");if(s===e){r.info("Received our own peerId, ignoring.");return}t.hostPeerId=e,n.multiplayerPeerJsHelper.connect(e)},De=function(){if(!l){r.error("No connection to send the start countdown message. Are you connected to a lobby?");return}l.send(JSON.stringify({action:"startGameCountdown",connectionType:"lobby"}))},be=function(){if(!l){r.error("No connection to send the start countdown message. Are you connected to a lobby?");return}l.send(JSON.stringify({action:"startGame",connectionType:"lobby"})),t._isReadyToSendOrReceiveGameUpdateMessages=!0},ue=function(){if(!l){r.error("No connection to send the join game message. Are you connected to a lobby?");return}l.send(JSON.stringify({action:"joinGame",connectionType:"lobby"}))};t.markConnectionAsConnected=function(){!l||l.send(JSON.stringify({action:"updateConnection",connectionType:"lobby",status:"connected",peerId:n.multiplayerPeerJsHelper.getCurrentId()}))};const E=function(e){y=null,B=null,Y=null,V&&(clearTimeout(V),V=null),Z=!1,t.hostPeerId?n.multiplayerComponents.showHostMigrationFinishedNotification(e):n.multiplayerComponents.showHostMigrationFailedNotification(e)};t.resumeGame=async function(e){t.isCurrentPlayerHost()&&(n.multiplayerMessageManager.sendResumeGameMessage(),await S(),x=setInterval(async()=>{await S()},te)),E(e)};const ye=async function({runtimeScene:e}){if(!y||!B)return;try{const s=`/play/game/${y.gameId}/public-lobby/${y.lobbyId}/lobby-change-host-request?peerId=${n.multiplayerPeerJsHelper.getCurrentId()}`;y=await k({relativeUrl:s,method:"GET",dev:w})}catch(s){r.error("Error while trying to retrieve the lobby change host request:",s),t.handleLobbyGameEnded(),E(e);return}if(!y)throw new Error("No lobby change host request received.");const o=y.newHostPeerId;if(!o){if(r.info("No new host picked yet."),F()-B>Le){r.error("Timeout while waiting for the lobby host change. Giving up."),t.handleLobbyGameEnded(),E(e);return}r.info("Retrying..."),setTimeout(()=>{ye({runtimeScene:e})},ve);return}try{const s=y.newLobbyId,i=y.newPlayers;if(!s||!i){r.error("Change host request is incomplete. Cannot change host."),t.handleLobbyGameEnded(),E(e);return}t.hostPeerId=o,Y=F(),b=s,o===n.multiplayerPeerJsHelper.getCurrentId()?(r.info(`We are the new host. Switching to lobby ${s} and awaiting for ${i.length-1} player(s) to connect.`),await he({runtimeScene:e})):(r.info(`Connecting to new host and switching lobby to ${s}.`),n.multiplayerPeerJsHelper.connect(o),V=setTimeout(()=>{r.error("Timeout while waiting for the game to resume. Leaving the lobby."),t.handleLobbyGameEnded(),E(e)},Te))}catch(s){r.error("Error while trying to change host:",s),t.handleLobbyGameEnded(),E(e)}},he=async function({runtimeScene:e}){if(!y)return;const o=y.newPlayers;if(!o){r.error("No expected players in the lobby change host request."),t.handleLobbyGameEnded(),E(e);return}const s=o.map(a=>a.playerNumber);n.multiplayerMessageManager.getConnectedPlayers().map(a=>a.playerNumber).filter(a=>!s.includes(a)).map(a=>{r.info(`Player ${a} left during the host migration. Marking as disconnected.`),n.multiplayerMessageManager.markPlayerAsDisconnected({runtimeScene:e,playerNumber:a})});const d=s.filter(a=>a!==t.playerNumber&&!n.multiplayerMessageManager.hasReceivedHeartbeatFromPlayer(a));if(d.length===0){r.info("All expected players are connected. Resuming the game."),await t.resumeGame(e);return}if(Y&&F()-Y>Pe&&d.length>0){r.error(`Timeout while waiting for players ${d.join(", ")} to connect. Assume they disconnected.`),d.map(a=>{n.multiplayerMessageManager.markPlayerAsDisconnected({runtimeScene:e,playerNumber:a})}),await t.resumeGame(e);return}setTimeout(()=>{he({runtimeScene:e})},Ee)};t.handleHostDisconnected=async function({runtimeScene:e}){if(!t._isLobbyGameRunning)return;y&&(t.handleLobbyGameEnded(),E(e));const o=n.projectData.properties.projectUuid;if(!o||!b){r.error("Cannot ask for a host change without the game ID or lobby ID.");return}try{Z=!0,n.multiplayerComponents.displayHostMigrationNotification(e);const s=`/play/game/${o}/public-lobby/${b}/lobby-change-host-request`,i=n.multiplayerMessageManager.getPlayersInfo(),g=Object.keys(i).map(c=>({playerNumber:parseInt(c,10),playerId:i[c].playerId,ping:i[c].ping})),d=JSON.stringify({playersInfo:g,peerId:n.multiplayerPeerJsHelper.getCurrentId()});y=await k({relativeUrl:s,method:"POST",body:d,dev:w}),B=F(),await ye({runtimeScene:e})}catch(s){r.error("Error while trying to change host:",s),t.handleLobbyGameEnded(),E(e)}},t.endLobbyGame=async function(){if(!t.isLobbyGameRunning())return;if(!t.isCurrentPlayerHost()){r.error("Only the host can end the game.");return}t._isLobbyGameRunning=!1,r.info("Ending the lobby game."),n.multiplayerMessageManager.sendEndGameMessage();const e=n.projectData.properties.projectUuid;if(!e||!b){r.error("Cannot end the lobby without the game ID or lobby ID.");return}const o=`/play/game/${e}/public-lobby/${b}/action/end`;try{await k({relativeUrl:o,method:"POST",body:JSON.stringify({}),dev:w})}catch(s){r.error("Error while ending the game:",s)}t.handleLobbyGameEnded()};const fe=function(){if(!l){r.error("No connection to send the message. Are you connected to a lobby?");return}const e=n.multiplayerPeerJsHelper.getCurrentId();if(!e)throw r.error("No peerId found, the player doesn't seem connected to the broker server."),new Error("Missing player peerId.");l.send(JSON.stringify({action:"sendPeerId",connectionType:"lobby",peerId:e})),t.hostPeerId=e},je=function(e,o,{checkOrigin:s}){if(!(s&&!["https://gd.games","http://localhost:4000"].includes(o.origin))){if(!o.data.id)throw new Error("Malformed message");switch(o.data.id){case"lobbiesListenerReady":{He(e);break}case"joinLobby":{if(!o.data.lobbyId)throw new Error("Malformed message.");f=null,re(e,o.data.lobbyId);break}case"startGameCountdown":{De();break}case"startGame":{be();break}case"leaveLobby":{K();break}case"joinGame":{ue();break}}}},X=function(e,o){r.error(o),t.removeLobbiesContainer(e),ae(e)},He=e=>{const o=n.multiplayerComponents.getLobbiesIframe(e);if(!o||!o.contentWindow)return;const s=e.getGame().getPlatformInfo();o.contentWindow.postMessage({id:"sessionInformation",isCordova:s.isCordova,devicePlatform:s.devicePlatform,navigatorPlatform:s.navigatorPlatform,hasTouch:s.hasTouch},"*")},xe=(e,o)=>{const s=Re({runtimeGame:e.getGame(),gameId:o});H=i=>{je(e,i,{checkOrigin:!0})},window.addEventListener("message",H,!0),n.multiplayerComponents.displayIframeInsideLobbiesContainer(e,s)},A=e=>{R=!1,f=null,n.multiplayerComponents.displayLoader(e,!1)},Se=async(e,o,s)=>{if(R)return;const i=n.projectData.properties.projectUuid;if(!i){X(e,"The game ID is missing, the quick join lobby action cannot continue.");return}m=null,R=!0,o&&n.multiplayerComponents.displayLoader(e,!0);const g=`/play/game/${i}/public-lobby/action/quick-join`,d=e.getGame().getPlatformInfo();try{const a=await n.evtTools.network.retryIfFailed({times:2},()=>k({relativeUrl:g,method:"POST",dev:w,body:JSON.stringify({isPreview:e.getGame().isPreview(),gameVersion:e.getGame().getGameData().properties.version,supportedCompressionMethods:d.supportedCompressionMethods})}));if(a.status==="full"||a.status==="not-enough-players"){T=!0,m=a.status==="full"?"FULL":"NOT_ENOUGH_PLAYERS",A(e),s&&t.openLobbiesWindow(e);return}if(a.status==="join-game")if(a.lobby.status==="waiting")f="START_GAME";else if(a.lobby.status==="playing")f="JOIN_GAME";else throw new Error(`Lobby in wrong status: ${a.status}`);else if(h){A(e),t.openLobbiesWindow(e);return}else f="OPEN_LOBBY_PAGE";re(e,a.lobby.id)}catch(a){r.error("An error occurred while joining a lobby:",a),T=!0,m="UNKNOWN",A(e),s&&t.openLobbiesWindow(e)}};t.getLobbyID=()=>b||"";const We=async(e,o,s,i)=>{if(R)return;const g=n.projectData.properties.projectUuid;if(!g){r.error("The game ID is missing, the quick join lobby action cannot continue.");return}m=null,R=!0,s&&n.multiplayerComponents.displayLoader(e,!0);const d=`/play/game/${g}/public-lobby/${o}`;try{const a=await n.evtTools.network.retryIfFailed({times:2},()=>k({relativeUrl:d,method:"GET",dev:w}));if(a.players.length===a.maxPlayers){r.error("Lobby is full - cannot quick join it."),T=!0,m="FULL",A(e),i&&t.openLobbiesWindow(e);return}if(a.status==="playing")f="JOIN_GAME";else if(a.status==="waiting")a.players.length===0?f="START_GAME":f="OPEN_LOBBY_PAGE";else throw new Error(`Lobby in wrong status: ${a.status}`);re(e,o)}catch(a){parseInt(a.message.match(/\d{3}/)?.[0])===404?(r.error("Lobby does not exist."),m="DOES_NOT_EXIST"):(r.error("An error occurred while joining a lobby:",a),m="UNKNOWN"),T=!0,A(e),i&&t.openLobbiesWindow(e)}},me=()=>{const e=Date.now();if(Q){if(e-Q<500)return Q=e,r.warn("Last request to quick join a lobby was sent too little time ago. Ignoring this one."),!0}else Q=e;return!1},we=async e=>{const o=n.playerAuthentication.getUserId(),s=n.playerAuthentication.getUserToken();if(!o||!s){P=!0;const{status:i}=await n.playerAuthentication.openAuthenticationWindow(e).promise;if(P=!1,i!=="logged")return!0}return!1};t.authenticateAndQuickJoinWithLobbyID=async(e,o,s,i)=>{me()||await we(e)||await We(e,o,s,i)},t.authenticateAndQuickJoinLobby=async(e,o,s)=>{me()||await we(e)||await Se(e,o,s)},t.isSearchingForLobbyToJoin=e=>R,t.hasQuickJoinJustFailed=e=>T,t.getQuickJoinFailureReason=()=>m,t.openLobbiesWindow=async e=>{if(t.isLobbiesWindowOpen(e)||n.playerAuthentication.isAuthenticationWindowOpen())return;const o=n.projectData.properties.projectUuid;if(!o){X(e,"The game ID is missing, the lobbies window cannot be opened.");return}if(j||P)return;if(!e.getGame().getRenderer().getDomElementContainer()){X(e,"The div element covering the game couldn't be found, the lobbies window cannot be displayed.");return}const i=()=>{t.removeLobbiesContainer(e)},g=n.playerAuthentication.getUserId(),d=n.playerAuthentication.getUserToken();if(!g||!d){P=!0;const{status:p}=await n.playerAuthentication.openAuthenticationWindow(e).promise;P=!1,p==="logged"&&t.openLobbiesWindow(e);return}if(n.multiplayerComponents.displayLobbies(e,i),N===null){j=!0;try{N=await de(e.getGame(),o)}catch(p){N=!1,r.error("Error while checking if the game is registered:",p),X(e,"Error while checking if the game is registered.");return}finally{j=!1}}const a=e.getGame().getRenderer().getElectron(),c=a?()=>a.shell.openExternal("https://wiki.gdevelop.io/gdevelop5/publishing/web"):()=>window.open("https://wiki.gdevelop.io/gdevelop5/publishing/web","_blank");n.multiplayerComponents.addTextsToLoadingContainer(e,N,c),N&&xe(e,o)},t.isLobbiesWindowOpen=function(e){return!!n.multiplayerComponents.getLobbiesRootContainer(e)},t.showLobbiesCloseButton=function(e,o){n.multiplayerComponents.changeLobbiesWindowCloseActionVisibility(e,o)},t.removeLobbiesContainer=function(e){Fe(),n.multiplayerComponents.removeLobbiesContainer(e)};const Fe=function(){H&&(window.removeEventListener("message",H,!0),H=null)},ae=function(e){const o=e.getGame().getRenderer().getCanvas();o&&o.focus()};t.leaveGameLobby=async()=>{K(),t.handleLobbyGameEnded()}})(Me=n.multiplayer||(n.multiplayer={}))})(gdjs||(gdjs={}));
//# sourceMappingURL=multiplayertools.js.map
